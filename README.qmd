---
format:
  gfm:
    toc: true
default-image-extension: ""
---

```{r}
#| echo: false
# Knitr options
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "man/figures/"
)

# Non-executable inline code
rinline <- function(code) {
  txt <- "`r CODE`"
  sub("CODE", code, txt)
}
```

<!-- badges: start -->
[![cran-status-badge](https://www.r-pkg.org/badges/version/taxnames)](https://cran.r-project.org/package=taxnames)
[![taxnames status badge](https://kamapu.r-universe.dev/badges/taxnames)](https://kamapu.r-universe.dev/taxnames)
[![cran-downloads-total](http://cranlogs.r-pkg.org/badges/grand-total/taxnames)](https://cran.r-project.org/package=taxnames)
[![cran-downloads-month](http://cranlogs.r-pkg.org/badges/last-month/taxnames)](https://cran.r-project.org/package=taxnames)
<br>
[![R-CMD-check](https://github.com/kamapu/taxnames/workflows/R-CMD-check/badge.svg)](https://github.com/kamapu/taxnames/actions)
[![cran-checks](https://badges.cranchecks.info/worst/taxnames.svg)](https://cran.r-project.org/web/checks/check_results_taxnames.html)
[![codecov](https://codecov.io/gh/kamapu/taxnames/graph/badge.svg?token=CE6UI5SK68)](https://codecov.io/gh/kamapu/taxnames)
<br>
[![cran-doi](https://img.shields.io/badge/DOI-10.32614/CRAN.package.taxnames-blue.svg)](https://doi.org/10.32614/CRAN.package.taxnames)
<!-- badges: end -->


# Motivation

This package attempts to simplify the citation and formatting of taxonomic names in Markdown documents ([R Markdown](https://rmarkdown.rstudio.com/) and [Quarto](https://quarto.org/)) as well as in LaTeX ([knitr](https://yihui.org/knitr/)).

To use this package, you need to have a taxonomic list imported into the [taxlist](https://docs.ropensci.org/taxlist/) package, including taxonomic ranks and parent-child relationships.

# Get started

## Installing taxnames

Assuming you are already working in one of the frameworks, either R Mardown or Quarto, you will need to install `taxnames` on your own system.

```{r}
#| eval: false
install.packages("taxnames", dependencies = TRUE)
```

Alternatively, you can download the latest development version from **GitHub** using the package [remotes](https://remotes.r-lib.org/).

```{r}
#| eval: false
library(remotes)
install_github("kamapu/taxnames")
```

## Set a standard taxonomy

Before you continue, you will need to load the packages `taxlist` and `taxnames` in your session.

```{r}
#| message: false
library(taxlist)
library(taxnames)
```

The package `taxnames` uses a taxonomic object formatted by `taxlist` and stored in the background.
If you manage to import your taxonomic list to `taxlist`, you can then set your own standard taxonomy.

```{r}
#| eval: false
set_tax(your_taxlist_object)
```

Per default `taxnames` takes the taxonomic list **Easplist** form the package `taxlist`.

```{r}
get_tax()
```

# Use case

## Accepted names

The main task of `taxnames` is to allow the formatting of taxonomic names by linking documents to pre-formatted taxonomic lists.
This avoids typing errors (even experts make them) and allows reproducibility and automation, especially for reporting on biodiversity.

We will select a target taxon using the keyword `"papyrus"`.

```{r}
# Match 'papyrus' with the taxonomic list
summary(get_tax(), "papyrus")
```

We pick the correspondent taxon identifier **206**.
Now we can use this ID to mention the taxon.

````
`r rinline("tn_fna(206)")`, also known as papyrus, is a tall sedge
growing in reed-like swamp vegetation in shallow water.
`r rinline("tn_an(206)")` has a very long history of use by humans as
one of the first types of paper ever made.
````

This will be rendered as

> `r tn_fna(206)`, also known as papyrus, is a tall sedge growing in reed-like swamp vegetation in shallow water.
> `r tn_an(206)` has a very long history of use by humans as one of the first types of paper ever made.

Functions provided by `taxnames` represent several formats for taxonomic names.

```{r}
#| echo: false
#| output: asis
library(simplermarkdown)

tn_tab <- data.frame(
  Description = c(
    "Full name without author name",
    "Full name with author name",
    "Full name with author name and taxon view (secundum)",
    "Abbreviated name without author name",
    "Abbreviated name with author name"
  ),
  Call = c(
    "`tn_fn(206)`",
    "`tn_fna(206)`",
    "`tn_fnas(206)`",
    "`tn_an(206)`",
    "`tn_ana(206)`"
  ),
  Output = c(
    tn_fn(206), tn_fna(206), tn_fnas(206), tn_an(206),
    tn_ana(206)
  )
)

cat(md_table(tn_tab))
```

## Synonyms

Analogous to them, there are functions defined for synonyms that format names by their name ID (**TaxonUsageID**) rather than by their taxon ID (**TaxonConceptID**).
For example

````
The synonymous of `r rinline("tn_fna(206)")` are
`r rinline("tn_funa(c(52612, 52613))")`
````

Which is rendered as.

> The synonymous of `r tn_fna(206)` are `r tn_funa(c(52612, 52613))`

```{r}
#| echo: false
#| output: asis
library(simplermarkdown)

tn_tab <- data.frame(
  Description = c(
    "Full usage name without author name",
    "Full usage name with author name",
    "Abbreviated usage name without author name",
    "Abbreviated usage name with author name"
  ),
  Call = c(
    "`tn_fun(52612)`",
    "`tn_funa(52612)`",
    "`tn_aun(52612)`",
    "`tn_auna(52612)`"
  ),
  Output = c(
    tn_fun(52612), tn_funa(52612), tn_aun(52612),
    tn_auna(52612)
  )
)

cat(md_table(tn_tab))
```


## Parental taxa

Last but not least, it is possible to query parental taxa with additional functions (see the package manual).
As a cross-check, we can first look at the indented list.

```{r}
indented_list(get_tax(), "papyrus")
```

The hierarchical classification can then be expressed in text as follows

````
`r rinline("tn_fna(206)")` belongs to the genus `r rinline("tn_pfna(206, \"genus\")")` and
to the family `r rinline("tn_pfna(206, \"family\", italics = FALSE)")`
````

> `r tn_fna(206)` belongs to the genus `r tn_pfna(206, "genus")` and to the family `r tn_pfna(206, "family", italics = FALSE)`
